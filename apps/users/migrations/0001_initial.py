# Generated by Django 4.2.4 on 2024-05-19 11:30

import apps.users.managers
import apps.users.validators
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        ("location", "0001_initial"),
        ("auth", "0012_alter_user_first_name_max_length"),
    ]

    operations = [
        migrations.CreateModel(
            name="TelegramUser",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="Created at"),
                ),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True, verbose_name="Updated at"),
                ),
                (
                    "first_name",
                    models.CharField(
                        blank=True, max_length=200, null=True, verbose_name="First name"
                    ),
                ),
                (
                    "last_name",
                    models.CharField(
                        blank=True, max_length=200, null=True, verbose_name="Last name"
                    ),
                ),
                (
                    "username",
                    models.CharField(
                        blank=True, max_length=200, null=True, verbose_name="Username"
                    ),
                ),
                ("chat_id", models.CharField(max_length=200, verbose_name="Chat id")),
                (
                    "language_code",
                    models.CharField(
                        blank=True,
                        max_length=10,
                        null=True,
                        verbose_name="Language code",
                    ),
                ),
                (
                    "type",
                    models.CharField(
                        choices=[
                            ("private", "Private"),
                            ("group", "Group"),
                            ("supergroup", "Super group"),
                            ("chanel", "Channel"),
                        ],
                        max_length=20,
                        verbose_name="Type",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        blank=True, max_length=200, null=True, verbose_name="Name"
                    ),
                ),
                (
                    "phone_number",
                    models.CharField(
                        blank=True,
                        max_length=15,
                        null=True,
                        unique=True,
                        validators=[apps.users.validators.PhoneValidator()],
                        verbose_name="Phone number",
                    ),
                ),
                ("is_admin", models.BooleanField(default=False, verbose_name="Admin")),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("active", "Active"),
                            ("blocked", "Blocked"),
                            ("not_found", "Not found"),
                            ("deactivated", "Deactivated"),
                        ],
                        default="active",
                        max_length=100,
                        verbose_name="Status",
                    ),
                ),
                ("age", models.PositiveIntegerField(verbose_name="Age")),
                (
                    "job_position",
                    models.CharField(
                        max_length=400, verbose_name="Job/Study place and Position"
                    ),
                ),
                (
                    "village",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="user_village",
                        to="location.village",
                    ),
                ),
            ],
            options={
                "verbose_name": "TelegramUser",
                "verbose_name_plural": "TelegramUsers",
            },
        ),
        migrations.CreateModel(
            name="RegistrationData",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("chat_id", models.CharField(max_length=200, unique=True)),
                ("name", models.CharField(blank=True, max_length=200, null=True)),
                (
                    "phone_number",
                    models.CharField(
                        blank=True,
                        max_length=15,
                        null=True,
                        validators=[apps.users.validators.PhoneValidator()],
                    ),
                ),
                ("age", models.PositiveIntegerField(verbose_name="Age")),
                (
                    "job_position",
                    models.CharField(
                        max_length=400, verbose_name="Job/Study place and Position"
                    ),
                ),
                (
                    "area",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="reg_area",
                        to="location.area",
                    ),
                ),
                (
                    "region",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="reg_region",
                        to="location.region",
                    ),
                ),
                (
                    "village",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="reg_village",
                        to="location.village",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="User",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("password", models.CharField(max_length=128, verbose_name="password")),
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="last login"
                    ),
                ),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                (
                    "is_staff",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether the user can log into this admin site.",
                        verbose_name="staff status",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Designates whether this user should be treated as active. Unselect this instead of deleting accounts.",
                        verbose_name="active",
                    ),
                ),
                (
                    "date_joined",
                    models.DateTimeField(
                        default=django.utils.timezone.now, verbose_name="date joined"
                    ),
                ),
                ("_id", models.IntegerField(db_index=True, null=True, unique=True)),
                (
                    "first_name",
                    models.CharField(max_length=64, verbose_name="First name"),
                ),
                (
                    "last_name",
                    models.CharField(max_length=64, verbose_name="Last name"),
                ),
                (
                    "middle_name",
                    models.CharField(
                        blank=True, max_length=64, null=True, verbose_name="Middle name"
                    ),
                ),
                (
                    "email",
                    models.EmailField(
                        blank=True,
                        max_length=254,
                        null=True,
                        unique=True,
                        verbose_name="Email",
                    ),
                ),
                ("bio", models.TextField(blank=True, null=True, verbose_name="Bio")),
                (
                    "date_of_birth",
                    models.DateField(
                        blank=True, null=True, verbose_name="Date of birth"
                    ),
                ),
                (
                    "gender",
                    models.CharField(
                        blank=True,
                        choices=[("male", "Male"), ("female", "Female")],
                        max_length=12,
                        null=True,
                        verbose_name="Gender",
                    ),
                ),
                (
                    "username",
                    models.CharField(
                        blank=True,
                        error_messages={"unique": "Имя пользователя уже занято."},
                        max_length=150,
                        null=True,
                        unique=True,
                        validators=[
                            django.contrib.auth.validators.UnicodeUsernameValidator()
                        ],
                        verbose_name="username",
                    ),
                ),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.permission",
                        verbose_name="user permissions",
                    ),
                ),
            ],
            options={
                "verbose_name": "User",
                "verbose_name_plural": "Users",
            },
            managers=[
                ("objects", apps.users.managers.UserManager()),
            ],
        ),
    ]
